aws-efs-csi-driver:
  controller:
    deleteAccessPointRootDir: true
    tags: {}
    serviceAccount:
      create: true
      name: efs-csi-controller-sa
      annotations:
        eks.amazonaws.com/role-arn:
  node:
    tolerations:
      # Tolerate standard Kubernetes node condition taints, but not 'node.kubernetes.io/unschedulable' or 'node.cilium.io/agent-not-ready'.
      # This ensures that the node is ready from a Karpenter and CNI perspective first
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        #tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        #tolerationSeconds: 300
      - key: node.kubernetes.io/disk-pressure
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/memory-pressure
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/pid-pressure
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/network-unavailable
        operator: Exists
        effect: NoSchedule
      - key: karpenter.sh/nodepool
        operator: Exists
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists

    serviceAccount:
      create: true
      name: efs-csi-node-sa
      annotations:
        eks.amazonaws.com/role-arn:

  storageClasses: []
    #- name: efs-tmp
    #  reclaimPolicy: Delete
    #  volumeBindingMode: WaitForFirstConsumer
    #  parameters:
    #    provisioningMode: efs-ap
    #    fileSystemId: fs-06827e90c60c3461d
    #    directoryPerms: "700"
    #    # Optional parameters
    #    uid: "1000"
    #    gid: "1000"
    #    basePath: "/dynamic"
    #    subPathPattern: "/${.PVC.namespace}/${.PVC.name}"
    #    ensureUniqueDirectory: "false" # Be careful when 'false', see warning in the official aws-efs-csi-drive docs.
    #    reuseAccessPoint: "true"
