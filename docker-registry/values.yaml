registry:
  proxies:
    - name: docker
      remoteUrl: https://registry-1.docker.io
      username: ""
      password: ""

      # Define the authentication of clients connecting to this new proxy registry
      # Allowed values: transparent, htpasswd, credentials, none
      #
      # transparent = use the credentials from the registry (default)
      # htpasswd    = specify a htpasswd format in the authHtpasswd property.
      # credentials = use the username and password from the authUsername and authPassword properties
      # none        = no authentication
      #
      auth: transparent
      # authUsername: ""
      # authPassword: ""
      # To generate a htpasswd formatted string, use:   docker run --entrypoint htpasswd httpd:2 -Bbn username password
      # authHtpasswd: ""

    # - name: ghcr
    #   remoteUrl: https://ghcr.io
    # - name: ecr
    #   remoteUrl: https://public.ecr.aws

  # Allowed values: filesystem, s3
  storage: filesystem
  s3:
    region: eu-north-1
    bucket:
    # Optional, typically only needed for S3 compatible storage services (Minio, etc).
    # regionEndpoint:
    # accessKey:
    # secretKey:

  # Generate if you use more than 1 replica, with:    openssl rand -base64 32 | head -c 32 | base64
  secret: ""

serviceAccount:
  annotations:
    eks.amazonaws.com/role-arn:

microservice:
  renderTemplates: false

replicaCount: 1

image:
  repository: public.ecr.aws/docker/library/registry

datadog:
  enabled: true

imagePullSecrets: []

probes:
  livenessPath: /
  readinessPath: /

priorityClassName: system-cluster-critical

resources: {}

securityContext:
  seLinuxOptions: {}
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL
  privileged: false
  readOnlyRootFilesystem: true
  runAsUser: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

podSecurityContext:
  fsGroupChangePolicy: Always
  sysctls: []
  supplementalGroups: []
  fsGroup: 1000

service:
  port: 5000

deployment:
  command:
    - /bin/registry
    - serve
    - /etc/docker/registry/config.yml

#scheduler:
#  minZones: 2

#affinity:
#  podAntiAffinity:
#    requiredDuringSchedulingIgnoredDuringExecution:
#      - labelSelector:
#          matchLabels:
#            app.kubernetes.io/name: '{{ template "microservice.name" . }}'
#            app.kubernetes.io/instance: '{{ .Release.Name }}-{{ .Release.Namespace }}'
#        topologyKey: kubernetes.io/hostname
#        # Requires feature gate: MatchLabelKeysInPodAffinity
#        #matchLabelKeys:
#        #  - pod-template-hash

cronjobs:
  - name: registry-gc
    schedule: "0 1 * * *"
    command: "/bin/registry garbage-collect --delete-untagged=true /etc/docker/registry/config.yml"
    suspend: true

env:
  OTEL_SDK_DISABLED: true
  OTEL_TRACES_EXPORTER: none

files:
  /etc/docker/registry/config.yml:
    content: |
      version: 0.1
      log:
        accesslog:
          disabled: false
        level: info
        formatter: text
        fields:
          service: registry
          environment: production
      storage:
        tag:
          concurrencylimit: 8
        cache:
          blobdescriptor: inmemory
          blobdescriptorsize: 10000
        delete:
          enabled: true
        redirect:
          disable: false
      http:
        addr: :5000
        prefix: /
        relativeurls: false
        draintimeout: 60s
        headers:
          X-Content-Type-Options: [nosniff]
        debug:
          addr: :5001
          prometheus:
            enabled: false
            path: /metrics
        http2:
          disabled: false
        h2c:
          enabled: false
      health:
        storagedriver:
          enabled: true
          interval: 10s
          threshold: 3