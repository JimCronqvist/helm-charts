aws-ebs-csi-driver:
  # Use the provisioner cluster role as a workaround to patch the gp2 storageClass in the init container
  sidecars:
    provisioner:
      additionalClusterRoleRules:
        - apiGroups: ["storage.k8s.io"]
          resources: ["storageclasses"]
          verbs: ["patch"]

  # Storage Classes to be created. Notes:
  # - All storage classes are being set to be Deleted when no longer in use.
  # - No volumes will be created until there is a pod that needs it.
  storageClasses:
    - name: ebs-gp3
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
      labels: {}
      volumeBindingMode: WaitForFirstConsumer
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      parameters:
        encrypted: "false"
        type: "gp3"
        tagSpecification_1: "Name={{ .PVCNamespace }}/{{ .PVCName }}"
        tagSpecification_2: "namespace={{ .PVCNamespace }}"
        tagSpecification_3: "pvcname={{ .PVCName }}"
        tagSpecification_4: "pvname={{ .PVName }}"
    - name: ebs-io2
      annotations: {}
      labels: {}
      volumeBindingMode: WaitForFirstConsumer
      reclaimPolicy: Delete
      allowVolumeExpansion: true
      parameters:
        encrypted: "false"
        type: "io2"
        tagSpecification_1: "Name={{ .PVCNamespace }}/{{ .PVCName }}"
        tagSpecification_2: "namespace={{ .PVCNamespace }}"
        tagSpecification_3: "pvcname={{ .PVCName }}"
        tagSpecification_4: "pvname={{ .PVName }}"

  node:
    tolerateAllTaints: false
    tolerations:
      # Tolerate standard Kubernetes node condition taints, but not 'node.kubernetes.io/unschedulable' or 'node.cilium.io/agent-not-ready'.
      # This ensures that the node is ready from a Karpenter and CNI perspective first
      - key: node.kubernetes.io/not-ready
        operator: Exists
        effect: NoExecute
        #tolerationSeconds: 300
      - key: node.kubernetes.io/unreachable
        operator: Exists
        effect: NoExecute
        #tolerationSeconds: 300
      - key: node.kubernetes.io/disk-pressure
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/memory-pressure
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/pid-pressure
        operator: Exists
        effect: NoSchedule
      - key: node.kubernetes.io/network-unavailable
        operator: Exists
        effect: NoSchedule
      - key: karpenter.sh/nodepool
        operator: Exists
        effect: NoSchedule
      - key: CriticalAddonsOnly
        operator: Exists

  controller:
    podLabels:
      tags.datadoghq.com/service: aws-ebs-csi-driver
    initContainers:
      - name: disable-default-sc-gp2
        image: bitnami/kubectl:latest
        command: ["kubectl", "patch", "storageclass", "gp2", "-p", '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}']

    tolerations:
      - key: CriticalAddonsOnly
        operator: Exists
      - effect: NoExecute
        operator: Exists
        tolerationSeconds: 300

    nodeSelector: {}

    # Enable volume modification via annotations for ebs volumes.
    volumeModificationFeature:
      enabled: true

    # EKS Cluster Name
    k8sTagClusterId:

    serviceAccount:
      name: ebs-csi-controller-sa
      annotations:
        eks.amazonaws.com/role-arn:

    region:
