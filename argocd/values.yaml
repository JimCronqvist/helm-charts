argocd:
  fullnameOverride: "argocd"
  podLabels:
    tags.datadoghq.com/service: argocd

  global:
    domain: argocd.example.com

    tolerations:
      - key: CriticalAddonsOnly
        operator: Exists

  configs:
    cm:
      exec.enabled: true
      admin.enabled: true

      #oidc.config: |
      #  name: <company> SSO
      #  issuer:
      #  clientID:
      #  clientSecret:
      #  requestedScopes:
      #    - openid
      #    - profile
      #    - email
      #    - groups
      #  logoutURL:

      server.insecure: true
      server.log.level: info # debug

      # Kyverno specific setting
      resource.compareoptions: |
        # disables status field diffing in specified resource types
        ignoreAggregatedRoles: true

    params:
      # Performance tuning for large clusters
      controller.cluster.cache.batch.events.processing: "true"
      controller.cluster.cache.events.processing.interval: "100ms"

      controller.status.processors: 40
      controller.operation.processors: 20

    rbac:
      scopes: '[groups]'
      policy.default: ''
      policy.csv: ''

    secret:
      # -- Bcrypt hashed admin password
      ## Argo expects the password in the secret to be bcrypt hashed. You can create this hash with
      ## `htpasswd -nbBC 10 "" $ARGO_PWD | tr -d ':\n' | sed 's/$2y/$2a/'`
      argocdServerAdminPassword: ""

    # Custom CSS in ArgoCD UI
    #styles: |
    #  .sidebar {}

  controller:
    #resources:
    #  limits:
    #    memory: 2Gi
    #  requests:
    #    cpu: 2
    #    memory: 2Gi
    podAnnotations:
      ad.datadoghq.com/argocd-application-controller.checks: |
        {
          "argocd": {
            "init_config": {},
            "instances": [
              {
                "app_controller_endpoint": "http://%%host%%:8082/metrics"
              }
            ]
          }
        }

  server:
    #resources:
    #  limits:
    #    memory: 4Gi
    #  requests:
    #    cpu: 500m
    #    memory: 1Gi
    service:
      type: ClusterIP
    clusterRoleRules:
      enabled: true
      rules:
        - apiGroups: [""]
          resources: ["pods/exec"]
          verbs: ["create"]
    podAnnotations:
      ad.datadoghq.com/argocd-server.checks: |
        {
          "argocd": {
            "init_config": {},
            "instances": [
              {
                "api_server_endpoint": "http://%%host%%:8083/metrics"
              }
            ]
          }
        }

  repoServer:
    #resources:
    #  limits:
    #    memory: 1Gi
    #  requests:
    #    cpu: 1
    #    memory: 1Gi
    podAnnotations:
      ad.datadoghq.com/argocd-repo-server.checks: |
        {
          "argocd": {
            "init_config": {},
            "instances": [
              {
                "repo_server_endpoint": "http://%%host%%:8084/metrics"
              }
            ]
          }
        }

# Define your Applications, ApplicationSets and Projects here if you don't want to deploy them separately - see 'argocd-apps' helm chart.
argocdApps:
  projects: {}
  applications: {}
    # Example of 'Sync ArgoCD itself - using Kustomize' - Recommended to use the Helm example below as this is in a helm context.
    #
    #argocd:
    #  namespace: argocd
    #  project: default
    #  source:
    #    repoURL: https://github.com/<org>/gitops.git
    #    targetRevision: master
    #    path: argocd
    #  destination:
    #    name: in-cluster
    #    namespace: argocd
    #  syncPolicy:
    #    automated: {}
    #    syncOptions:
    #      - CreateNamespace=true

    # Example of 'Sync ArgoCD itself - using Helm chart from OCI registry and values from a git repo'
    #
    #argocd:
    #  namespace: argocd
    #  project: default
    #  sources:
    #    - repoURL: oci://ghcr.io/jimcronqvist/helm-charts
    #      chart: argocd
    #      targetRevision: 0.1.* # chart version
    #    - repoURL: https://github.com/<org>/gitops.git
    #      targetRevision: master
    #      ref: values
    #  source:
    #    repoURL: oci://ghcr.io/jimcronqvist/helm-charts
    #    chart: argocd
    #    targetRevision: 0.1.* # chart version
    #    helm:
    #      valueFiles:
    #        - $values/argocd/values.yaml # path inside your Git repo
    #  destination:
    #    name: in-cluster
    #    namespace: argocd
    #  syncPolicy:
    #    automated: {}
    #    syncOptions:
    #      - CreateNamespace=true
  applicationsets: {}
  itemTemplates: []
