apiVersion: v1
kind: ConfigMap
metadata:
  name: datadog-agent-confd-config
  labels:
    {{- include "datadog-operator.labels" . | nindent 4 }}
data:
  {{- range $name, $check := .Values.datadogAgent.customChecks }}
  {{- if (dig "enabled" true $check) }}
  custom_{{ $name | snakecase }}.yaml: |
    {{- if $check.config }}
    {{- $check.config | nindent 4 }}
    {{- else }}
    init_config:
    instances: [{}]
    {{- end }}
  {{- end }}
  {{- end }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: datadog-agent-checksd-config
  labels:
    {{- include "datadog-operator.labels" . | nindent 4 }}
data:
  {{- range $name, $check := .Values.datadogAgent.customChecks }}
  {{- if (dig "enabled" true $check) }}
  custom_{{ $name | snakecase }}.py: |
    {{- if $check.script }}
    {{- $check.script | nindent 4 }}
    {{- else if $check.cmd }}
    from datadog_checks.base import AgentCheck
    from datadog_checks.base.utils.subprocess_output import get_subprocess_output
    class {{ $name | camelcase }}Check(AgentCheck):
      def check(self, instance):
        out, err, code = get_subprocess_output(["bash", "-c", "custom_{{ $name | snakecase }}.sh"], self.log, raise_on_empty_output=True)
        if out.replace(".", "").isnumeric():
          out = float(out)
        elif out.isnumeric():
          out = int(out)
        else:
          out = -1 # Unexpected output
        self.gauge('custom.{{ $name | snakecase }}', out)
  custom_{{ $name | snakecase }}.sh: |
    #!/usr/bin/env bash
    {{ $check.cmd | nindent 4 }}
    {{- else }}
    # No script or command provided for custom check {{ $name }}.
    # Use either `script` or `cmd` to define the check.
    {{- end }}
  {{- end }}
  {{- end }}
