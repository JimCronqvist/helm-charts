{{- define "microservice.tpl.ingressroute" -}}
{{- $ingressroute := .Values.ingressroute -}}
{{- if $ingressroute.enabled -}}
{{- $fullName := include "microservice.fullname" . -}}
{{- $labels := include "microservice.labels" (dict "context" $) -}}
{{- $svcPort := dig "port" 80 (default (dict) .Values.service) -}}
{{- $svcName := $fullName -}}
{{/*
StripPrefix middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if .stripPrefix }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-strip
  labels:
    {{- $labels | nindent 4 }}
spec:
  {{- if regexMatch "[$^+*()\\[\\]{}]" .stripPrefix }}
  stripPrefixRegex:
    regex:
      - {{ .stripPrefix | quote }}
  {{- else }}
  stripPrefix:
    prefixes:
      - {{ .stripPrefix | quote }}
  {{- end }}
---
{{- end }}
{{- end }}
{{/*
Rewrite middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if and .rewrite .rewrite.regex .rewrite.replacement }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-rewrite
  labels:
    {{- $labels | nindent 4 }}
spec:
  replacePathRegex:
    regex: {{ .rewrite.regex }}
    replacement: {{ .rewrite.replacement }}
---
{{- end }}
{{- end }}
{{/*
IP Whitelist/AllowList middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if or .ipWhiteList .ipAllowList }}
{{- $ipList := .ipAllowList | default .ipWhiteList }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-ip-whitelist
  labels:
    {{- $labels | nindent 4 }}
spec:
  ipWhiteList:
    {{- if kindIs "string" $ipList }}
    sourceRange:
      - {{ $ipList }}
    {{- else if kindIs "slice" $ipList }}
    sourceRange:
    {{- range $ipList }}
      - {{ . }}
    {{- end }}
    {{- else }}
      {{- toYaml $ipList | nindent 4 }}
    {{- end }}
---
{{- end }}
{{- end }}
{{/*
Rate Limit middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if and .rateLimit .rateLimit.average }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-rate-limit
  labels:
    {{- $labels | nindent 4 }}
spec:
  rateLimit:
    average: {{ .rateLimit.average | default 0 }}
    burst: {{ .rateLimit.burst | default 1 }}
    period: {{ .rateLimit.period | default "1m" | quote }}
    sourceCriterion:
      {{- with .rateLimit.ipStrategy }}
      ipStrategy:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .rateLimit.requestHeaderName }}
      requestHeaderName: {{ .rateLimit.requestHeaderName | quote }}
      {{- else if .rateLimit.ipStrategy }}
      requestHeaderName: "X-Forwarded-For"
      {{- else }}
      requestHeaderName: "X-Real-IP"
      {{- end }}
---
{{- end }}
{{- end }}
{{/*
Redirect middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if and .redirect .redirect.regex .redirect.replacement }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-redirect
  labels:
    {{- $labels | nindent 4 }}
spec:
  redirectRegex:
    regex: {{ .redirect.regex }}
    replacement: {{ .redirect.replacement }}
---
{{- end }}
{{- end }}
{{/*
ForwardAuth middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if and .forwardAuth }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-forward-auth
  labels:
    {{- $labels | nindent 4 }}
spec:
  forwardAuth:
    {{- if eq (kindOf .forwardAuth) "string" }}
    address: {{ .forwardAuth | quote }}
    trustForwardHeader: true
    {{- else }}
    address: {{ .forwardAuth.address | quote }}
    {{- toYaml (omit (merge (dict "trustForwardHeader" true) .forwardAuth) "address") | nindent 4 }}
    {{- end }}
---
{{- end }}
{{- end }}
{{/*
BasicAuth middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if and .basicAuth }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $fullName }}-route{{ $index }}-basic-auth
  labels:
    {{- $labels | nindent 4 }}
type: Opaque
stringData:
  users: |-
    {{- range .basicAuth.users }}
    {{ . }}
    {{- end }}
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-basic-auth
  labels:
    {{- $labels | nindent 4 }}
spec:
  basicAuth:
    secret: {{ $fullName }}-route{{ $index }}-basic-auth
    realm: {{ .basicAuth.realm | default $fullName | quote }}
    headerField: {{ .basicAuth.headerField | default "Authorization" | quote }}
    removeHeader: {{ .basicAuth.removeHeader | default true }}
---
{{- end }}
{{- end }}
{{/*
Headers middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if .headers }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-headers
  labels:
    {{- $labels | nindent 4 }}
spec:
  headers:
    {{- $headers := .headers }}
    {{- $mapping := dict "response" "customResponseHeaders" "request" "customRequestHeaders" }}
    {{- $renamed := dict }}
    {{- range $old, $new := $mapping }}
      {{- if hasKey $headers $old }}
        {{- $_ := set $renamed $new (index $headers $old) }}
      {{- end }}
    {{- end }}
    {{- $clean := deepCopy $headers }}
    {{- range $old := keys $mapping }}
      {{- $_ := unset $clean $old }}
    {{- end }}
    {{- toYaml (merge $clean $renamed) | nindent 4 }}
---
{{- end }}
{{- end }}
{{/*
Custom middleware
*/}}
{{- range $index, $route := $ingressroute.routes }}
{{- if .middlewares }}
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: {{ $fullName }}-route{{ $index }}-custom
  labels:
    {{- $labels | nindent 4 }}
spec:
  {{- toYaml .middlewares | nindent 2 }}
---
{{- end }}
{{- end }}
{{/*
IngressRoute
*/}}
{{- $suffixes := list "" }}
{{- range $key, $value := (omit $ingressroute.tls "enabled" "forceHttps") }}
  {{- if and $ingressroute.tls.enabled $value }}
    {{- $suffixes = append $suffixes "-tls" }}
    {{- break }}
  {{- end }}
{{- end }}
{{- range $suffix := $suffixes }}
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ $fullName }}{{ $suffix }}
  labels:
    {{- $labels | nindent 4 }}
spec:
  entryPoints:
    {{- if has "-tls" $suffixes }}
    {{- if eq $suffix "-tls" }}
    - websecure
    {{- else }}
    - web
    {{- end }}
    {{- else }}
    {{- if $ingressroute.tls.enabled }}
    - websecure
    {{- end }}
    - web
    {{- end }}
  routes:
    {{- range $index, $route := $ingressroute.routes }}
    {{- $_ := set . "host" ($ingressroute.overrideHost | default .host) }}
    {{- $matchRule := list }}
    {{- if and .host (regexMatch "[$^+*()\\[\\]{}]" .host) }}
    {{- $matchRule = mustAppend $matchRule (regexReplaceAll "^(.*[|].*)$" (regexReplaceAll "([^,]+)" (nospace .host) "HostRegexp(`${1}`)" | replace "," " || ") "(${1})") }}
    {{- else if .host }}
    {{- $matchRule = mustAppend $matchRule (regexReplaceAll "^(.*[|].*)$" (regexReplaceAll "([^,]+)" (nospace .host) "Host(`${1}`)" | replace "," " || ") "(${1})") }}
    {{- end }}
    {{- if and .header (regexMatch "[$^+*()\\[\\]{}]" .header) }}
    {{- $matchRule = mustAppend $matchRule (tpl "HeaderRegexp(`{{ (splitn \":\" 2 .header)._0 }}`, `{{ (splitn \":\" 2 .header)._1 | trim }}`)" (merge . (dict "Template" $.Template))) }}
    {{- else if .header }}
    {{- $matchRule = mustAppend $matchRule (tpl "Header(`{{ (splitn \":\" 2 .header)._0 }}`, `{{ (splitn \":\" 2 .header)._1 | trim }}`)" (merge . (dict "Template" $.Template))) }}
    {{- end }}
    {{- if .method }}
    {{- $matchRule = mustAppend $matchRule (regexReplaceAll "^(.*[|].*)$" (regexReplaceAll "([^,]+)" (nospace .method) "Method(`${1}`)" | replace "," " || ") "(${1})") }}
    {{- end }}
    {{- if and .path (regexMatch "[$^+*()\\[\\]{}]" .path) }}
    {{- $matchRule = mustAppend $matchRule (tpl "PathRegexp(`{{ .path }}`)" (merge . (dict "Template" $.Template))) }}
    {{- else if .path }}
    {{- $matchRule = mustAppend $matchRule (tpl "PathPrefix(`{{ .path }}`)" (merge . (dict "Template" $.Template))) }}
    {{- end }}
    {{- if .useCache }}
    {{- $matchRule = mustAppend $matchRule "!Header(`VARNISH`, `0`)" }}
    {{- end }}
    {{- if .rule }}
    {{- $matchRule = mustAppend $matchRule (tpl "({{ .rule }})" (merge . (dict "Template" $.Template))) }}
    {{- end }}
    {{- $matchRule = $matchRule | join " && " }}
    - kind: Rule
      priority: {{ .priority | default (len $matchRule) }}
      match: {{ $matchRule }}
      services:
        {{- if .useCache }}
        - name: {{ $svcName }}-varnish
          port: 80
          nativeLB: {{ .nativeLB | default false }}
          {{- with .weight }}
          weight: {{ . }}
          {{- end }}
        {{- else }}
        - name: {{ .serviceName | default $svcName }}
          {{- with .serviceNamespace }}
          namespace: {{ . }}
          {{- end }}
          port: {{ .servicePort | default $svcPort }}
          nativeLB: {{ .nativeLB | default false }}
          {{- with .weight }}
          weight: {{ . }}
          {{- end }}
        {{- if and .fallbackServiceName }}
        - name: {{ .fallbackServiceName }}
          {{- with .serviceNamespace }}
          namespace: {{ . }}
          {{- end }}
          port: {{ .fallbackServicePort | default $svcPort }}
          nativeLB: {{ .nativeLB | default false }}
          {{- with .falllbackServiceWeight }}
          weight: {{ . }}
          {{- end }}
        {{- end }}
        {{- end }}
      middlewares:
        {{- if and $ingressroute.tls.enabled $ingressroute.tls.forceHttps }}
        - name: {{ $fullName }}-redirect-https
        {{- end }}
        {{- if $ingressroute.compress }}
        - name: {{ $fullName }}-compress
        {{- end }}
        {{- if $ingressroute.responseHeaderMicroservice }}
        - name: {{ $fullName }}-header-x-microservice
        {{- end }}
        {{- if $ingressroute.headers }}
        - name: {{ $fullName }}-headers
        {{- end }}
        {{- if or .ipAllowList .ipWhiteList }}
        - name: {{ $fullName }}-route{{ $index }}-ip-whitelist
        {{- end }}
        {{- if .rateLimit }}
        - name: {{ $fullName }}-route{{ $index }}-rate-limit
        {{- end }}
        {{- if .forwardAuth }}
        - name: {{ $fullName }}-route{{ $index }}-forward-auth
        {{- end }}
        {{- if .basicAuth }}
        - name: {{ $fullName }}-route{{ $index }}-basic-auth
        {{- end }}
        {{- if .headers }}
        - name: {{ $fullName }}-route{{ $index }}-headers
        {{- end }}
        {{- if .rewrite }}
        - name: {{ $fullName }}-route{{ $index }}-rewrite
        {{- end }}
        {{- if .redirect }}
        - name: {{ $fullName }}-route{{ $index }}-redirect
        {{- end }}
        {{- if .stripPrefix }}
        - name: {{ $fullName }}-route{{ $index }}-strip
        {{- end }}
        {{- if .middlewares }}
        - name: {{ $fullName }}-route{{ $index }}-custom
        {{- end }}
    {{- end }}
  {{- if and $ingressroute.tls.enabled (eq $suffix "-tls") }}
  tls:
    {{- if $ingressroute.tls.secretName }}
    secretName: {{ $ingressroute.tls.secretName }}
    {{- end }}
    {{- if $ingressroute.tls.certResolver }}
    certResolver: {{ $ingressroute.tls.certResolver }}
    {{- end }}
    {{- if $ingressroute.tls.domains }}
    domains:
    {{- range $domain := $ingressroute.tls.domains }}
      - main: {{ $domain.main }}
        {{- with $domain.sans }}
        sans:
          {{- toYaml $domain.sans | nindent 10 }}
        {{- end }}
    {{- end }}
    {{- end }}
  {{- end }}
---
{{- end }}
{{- end }}
{{- end }}
