# Default values for microservice.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

strategy:
  # Allowed values: 'RollingUpdate' or 'Recreate'.
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 25%

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets:
  - name: docker-image-pull-secret

# The name should always be overridden as this is a generic chart that is used by any application
nameOverride: ""

fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  # Specifies whether RBAC resources should be created
  create: false
  # Set whether it is a Role or ClusterRole
  kind: Role
  # Set the custom RBAC rules
  # rules:
  #   - apiGroups:
  #       - ""
  #     resources:
  #       - pods
  #     verbs:
  #       - get
  #       - list
  rules: []

datadog:
  enabled: false
  annotations: {}
  # Optional: Defaults to env.APP_ENV with a fallback of 'production' if left empty
  env: ""
  # Optional: Defaults to the chat name if left empty
  service: ""
  # Optional: Defaults to the same tag as for the container if left empty
  version: ""

tailscale:
  enabled: false
  hostname: ""
  tags: ""
  prefix: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

terminationGracePeriodSeconds: 30

# Set the priority class, or give set a value directly via priorityClassValue and a priority class will be generated.
# If both are specified, priorityClassValue will be used.
priorityClassValue:
priorityClassName:

deployment:
  enabled: true
  # Leave empty to use the defaults set in the Docker image. command = ENTRYPOINT, args = CMD, in the docker world
  command: []
  args: []
  # Override the cmd and args with 'sleep infinity', useful for debugging by logging in to the container when it dies
  debug: false
  initContainers: []
    #- name: volume-permissions
    #  image: busybox:latest
    #  command: ["sh", "-c", "touch /data/acme.json; chmod -v 600 /data/acme.json"]
    #  securityContext: {}
  sidecars: []
    #- name: nginx
    #  image: nginx:${IMAGE_TAG}
    #  imagePullPolicy: Always
    #  mounts: false
  lifecycle: {}
    # preStop:
    #   exec:
    #     command: ["/bin/bash","-c","/bin/sleep 1; kill -QUIT 1"]

  # For advanced users: Control what Kind the deployment should have, Deployment or StatefulSet.
  kind: Deployment
  statefulSet:
    updateStrategy:
      type: RollingUpdate

service:
  enabled: true
  type: ClusterIP
  name: http
  appProtocol: http
  port: 80
  annotations: {}

  # Which container is the port used by, defaults to the primary container. Mostly used for sidecars.
  #container:

  # Set the primary container port if you need to use a different port for the exposed service
  #containerPort:

  # Configure extra ports if needed, either a static port or a port range
  extraPorts: []
  #  - name: ftp-data
  #    port: 20
  #    container: sidecar-name
  #  - name: ftp-passive
  #    portRange:
  #      start: 1000
  #      end: 1100

ingressroute:
  enabled: true
  responseHeaderMicroservice: false
  tls:
    enabled: true
    forceHttps: true
    #certResolver: letsencrypt
    #domains:
    #  - main: domain.com
    #    sans:
    #      - test.domain.com
  routes:
    # Path is required, and will match against PathPrefix(`...`), with an optional Host() or HostRegexp() match (multiple with commas)
    # priority: 0, means the priority will be ignored, and the default traefik rules length sorting is applied.
    # stripPrefix: {path}, use to remove a base path when the container does not expect it, such as nginx with static files
    #
    # - path: /
    #   host: test.local
    #   priority: 0
    #   stripPrefix:
    #   useCache: true
    #
    # - path: /{path:([0-9]{6,}}
    #   host: test(.*).local
    #   priority: 0
    #   stripPrefix: /base-path
    #   method: GET,POST
    #   header: "X-Api-Key: .*"

cache:
  enabled: false
  replicaCount: 1
  varnishVersion: 7.4-alpine
  varnishPullPolicy: IfNotPresent
  livenessProbe: true
  readinessProbe: true
  deploymentDebug: false
  deploymentKind: Deployment
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  lifecycle:
    preStop:
     exec:
       command: ["sleep", "5"]
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 5
    targetCPUUtilizationPercentage: 80
  resources: {}
  pvc:
    workdir:
      emptyDir:
        medium: Memory
        #sizeLimit: 2Gi
      mounts:
        - mountPath: "/var/lib/varnish/varnishd"
  backendHost: ""
  backendPort:
  healthEndpoint: /health
  env:
    VARNISH_UNSET_COOKIE: "false"
    VARNISH_UNSET_AUTHORIZATION: "false"
    VARNISH_UNSET_X_API_KEY: "false"
  rules: []
  customVcl: ""

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  #
  # Recommendation notes:
  # 1. Set a cpu request to guarantee that there is enough reserved for the application, kind of wild west without it.
  # 2. Avoid setting a cpu limit unless you definitely need it
  # 3. Also, you can use krr to get recommendations for cpu and memory requests and limits.
  #
  # limits:
  #   cpu: '100m'
  #   memory: 128Mi
  # requests:
  #   cpu: '100m'
  #   memory: 128Mi

# Pod Disruption Budget
pdb:
  enabled: false
  # Minimum number/percentage of pods that should remain scheduled
  minAvailable: 1
  # Maximum number/percentage of pods that may be made unavailable
  maxUnavailable: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 20
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}
  # karpenter.sh/nodepool: on-demand

tolerations: []

affinity: {}

topologySpreadConstraints: []

# Provides some standard use cases to control the Kubernetes scheduler behavior, will be merged with affinity and topologySpreadConstraints rules.
scheduler: {}
  # sameNode: true
  # minZones: 2
  # preferDifferentZones: true
  # preferDifferentNodes: true

hostAliases: []

# Format: { volumeName1: { size, accessMode, storageClass, mounts: [{ mountPath, subPath, [readonly] }, ...], ... } }
pvc: {}
  # data:
  #   size: 8Gi
  #   accessMode: ReadWriteOnce
  #   # StorageClass: "-" to disable dynamic provisioning, if empty string the default provisioner is used
  #   storageClass: ""
  #   mounts:
  #     - mountPath: "/mnt/data"

# Paths for the probes to do http health checkups against. Set to empty or false to disable the probe.
probes:
  # Use to check if the container is alive, the pod will be restarted if this fails. Best practice:
  # - Only include basic checks, never include checks on connections to other services (e.g. database, redis, etc.)
  # - Do not put a too strict failureThreshold, as you want to avoid a restart if the container is under heavy load, but not dead.
  livenessPath: /health
  # Use to check if the container is ready to receive traffic, the pod will be removed from the service if this fails. Best practice:
  # - Include checks on connections to all vital services (e.g. database, redis, etc.), but keep it light and fast.
  # - Always specify a readiness probe to make sure that the pod only gets traffic if it can properly handle incoming requests
  readinessPath: /health
  # Use to check if the container has initialized all bootstrap tasks and is ready to receive liveness checks. Best practice:
  # - Only needed if the pod requires initializing time, e.g. has warmup tasks or longer booting up time.
  # - Could take longer to complete, because they are only called when the pod is initializing.
  # - Often uses the same endpoint as livenessPath, but with a less strict failure threshold.
  # - Better to use this than an initialDelaySeconds on the liveness probe, as this will be used as "up to x seconds"
  #   instead of "no matter what, wait for x seconds before checking anything else". Resulting in faster startup times
  #   when the boot time can be dynamic.
  startupPath:

  # Or specify a full custom config for the probes
  # livenessProbe:
  # readinessProbe:
  # startupProbe:

jobs: []
  # - name: Bootstrap task
  #   command: "date; echo Completed bootstrap task"
  #   annotations: {}
  #   #backoffLimit: 6
  #   #ttlSecondsAfterFinished: 3600

cronjobs: []
  # - name: Cleanup task
  #   command: "date; echo Completed cleanup task"
  #   schedule: "* * * * *"
  #   #timeZone: "Europe/Stockholm"
  #   #concurrencyPolicy: Forbid
  #   #suspend: true
  #   #backoffLimit: 6

# Set both normal and secret environment variables
env: {}
  # NODE_ENV: production
secrets: {}
  # API_SECRET_KEY: ...

# Add configuration files to the container
files: {}

# Extra custom manifests
extraManifests: []
